version: "3.9"
# can be renamed to docker-compose.cloud.yml
services:

  # db:
  #   image: postgis/postgis:16-3.4 # alt: postgres:15.3
  #   restart: always
  #   volumes:
  #     - data:/var/lib/postgres/data
  #   environment:
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_HOST=${POSTGRES_HOST}
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     #- POSTGRES_INITDB_ARGS=--encoding=UTF8

  #   ports:
  #     - ${POSTGRES_PORT}:${POSTGRES_PORT}
  #   # expose:
  #   #   - ${POSTGRES_PORT}
  #   networks:
  #     - mynetwork

  api:
    image: taraman12/solar-park-detection-api:latest
    # depends_on:
    #   - db
    ports:
      - "8000:8000"
    command: bash -c "cd /code && alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers"
    environment:
      - DOCKERIZED=true
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - aws_access_key_id=${aws_access_key_id}
      - aws_secret_access_key=${aws_secret_access_key}
      - aws_s3_bucket=${aws_s3_bucket}
      - region_name=${region_name}
      - DOCKER_SWARM_MANAGER_IP=${DOCKER_SWARM_MANAGER_IP}
      - DOCKER_SWARM_JOIN_TOKEN_MANAGER=${DOCKER_SWARM_JOIN_TOKEN_MANAGER}
      - DOCKER_SWARM_JOIN_TOKEN_WORKER=${DOCKER_SWARM_JOIN_TOKEN_WORKER}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
    # expose:
    #   - "8000"
    networks:
      - mynetwork
    volumes:
      - data:/var/lib/postgis/data
      - /var/run/docker.sock:/var/run/docker.sock
    # ml-serve:
    #   image: taraman12/solar-park-detection-ml-serve:latest
    #   ports:
    #     - "8080:8080"
    #     - "8081:8081"
    #     - "8082:8082"
    #   expose:
    #     - "8080"
    #     - "8081"
    #     - "8082"
    #   # limits the number of cpus the container can use
    #   # else on each thread (core) a model will be loaded
    #   cpus: 1.0

    # processing:
    #   image: taraman12/solar-park-detection-processing:latest
    #   depends_on:
    #     - ml-serve
    #   environment:
    #     - DOCKERIZED=true
    #     - MAKE_TRAININGS_DATA=False
    #     - PRODUCTION=true
    #     - aws_access_key_id=${aws_access_key_id}
    #     - aws_secret_access_key=${aws_secret_access_key}
    #     - aws_s3_bucket=${aws_s3_bucket}
    #     - region_name=${region_name}
    #   ports:
    #     - "5678:5678"
    #   expose:
    #     - "5678"
    #   # prevents the container from being started automatically
    #   # when running `docker-compose up`
    #   # profiles: [ "cli-only" ]

    # frontend:
    #   image: taraman12/solar-park-detection-frontend:latest
    #   environment:
    #     - VITE_DOCKERIZED=true
    #     - VITE_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    #     - VITE_AWS_ACCESS_KEY_ID=${aws_access_key_id}
    #     - VITE_AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
    #     - VITE_BASE_IP=${VITE_BASE_IP}
    #   ports:
    #     - "5000:5000"
    #   networks:
    #     - mynetwork
    # expose:
    #   - "80"
  new-frontend:
    image: taraman12/solar-park-detection-new-frontend:latest
    environment:
      - VITE_DOCKERIZED=true
      - VITE_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - VITE_AWS_ACCESS_KEY_ID=${aws_access_key_id}
      - VITE_AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
      - VITE_BASE_IP=${VITE_BASE_IP}
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - mynetwork
    expose:
      - "80"
  # proxy:
  #   image: nginx:1.25.3
  #   restart: always
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - /home/ec2-user/nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - mynetwork
  #   depends_on:
  #     - frontend
  #     - api

networks:
  mynetwork:
    driver: overlay
    attachable: true

volumes:
  data:
