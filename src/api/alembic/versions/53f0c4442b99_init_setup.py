"""Init setup

Revision ID: 53f0c4442b99
Revises:
Create Date: 2024-01-17 22:49:03.076795

"""
import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql  # noqa: F401

# revision identifiers, used by Alembic.
revision = "53f0c4442b99"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "instance",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("service", sa.String(), nullable=True),
        sa.Column("ec2_instance_id", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("service"),
    )
    op.create_index(op.f("ix_instance_id"), "instance", ["id"], unique=False)
    op.create_table(
        "maillist",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_maillist_id"), "maillist", ["id"], unique=False)
    op.create_geospatial_table(
        "solarpark",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name_of_model", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("size_in_sq_m", sa.Float(), nullable=True),
        sa.Column("peak_power", sa.Float(), nullable=True),
        sa.Column("date_of_data", sa.Date(), nullable=True),
        sa.Column("first_detection", sa.Date(), nullable=True),
        sa.Column("last_detection", sa.Date(), nullable=True),
        sa.Column("avg_confidence_over_all_observations", sa.Float(), nullable=True),
        sa.Column("image_identifier", sa.String(), nullable=True),
        sa.Column("is_valid", sa.String(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("lat", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column("lon", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column(
            "geom",
            Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_solarpark_geom",
        "solarpark",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(op.f("ix_solarpark_id"), "solarpark", ["id"], unique=False)
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_full_name"), "user", ["full_name"], unique=False)
    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=False)
    op.create_geospatial_table(
        "prediction",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("solarpark_id", sa.Integer(), nullable=True),
        sa.Column("name_of_model", sa.String(), nullable=True),
        sa.Column("size_in_sq_m", sa.Float(), nullable=True),
        sa.Column("peak_power", sa.Float(), nullable=True),
        sa.Column("date_of_data", sa.Date(), nullable=True),
        sa.Column("avg_confidence", sa.Float(), nullable=True),
        sa.Column("image_identifier", sa.String(), nullable=True),
        sa.Column("is_valid", sa.String(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("lat", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column("lon", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column(
            "geom",
            Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["solarpark_id"], ["solarpark.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_prediction_geom",
        "prediction",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(op.f("ix_prediction_id"), "prediction", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_prediction_id"), table_name="prediction")
    op.drop_geospatial_index(
        "idx_prediction_geom",
        table_name="prediction",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("prediction")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_index(op.f("ix_user_full_name"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_solarpark_id"), table_name="solarpark")
    op.drop_geospatial_index(
        "idx_solarpark_geom",
        table_name="solarpark",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("solarpark")
    op.drop_index(op.f("ix_maillist_id"), table_name="maillist")
    op.drop_table("maillist")
    op.drop_index(op.f("ix_instance_id"), table_name="instance")
    op.drop_table("instance")
    # ### end Alembic commands ###
