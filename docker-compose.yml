version: "3.9"
services:
  db:
    image: postgres:15.3 # alt: postgis/postgis:15-3.3
    restart: always
    volumes:
      - data:/var/lib/postgres/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      #- POSTGRES_INITDB_ARGS=--encoding=UTF8

    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    expose:
      - ${POSTGRES_PORT}

  api:
    build:
      context: ./src/api
      dockerfile: api.dockerfile
    depends_on:
      - db
    ports:
      - "8000:8000"
    environment:
      - DOCKERIZED=true
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - aws_access_key_id = ${aws_access_key_id}
      - aws_secret_access_key = ${aws_secret_access_key}
      - aws_s3_bucket = ${aws_s3_bucket}
      - region_name = ${region_name}
    expose:
      - "8000"

    volumes:
      - data:/var/lib/postgis/data
      - /var/run/docker.sock:/var/run/docker.sock

  # downloader:
  #   build:
  #     context: ./src/downloader
  #     dockerfile: downloader.dockerfile
  #   environment:
  #     - DOCKERIZED=true

  # ml-serve:
  #   build:
  #     context: ./src/ml-serve
  #     dockerfile: ml-serve.dockerfile
  #   ports:
  #     - "8080:8080"
  #     - "8081:8081"
  #     - "8082:8082"
  #   expose:
  #     - "8080"
  #     - "8081"
  #     - "8082"
  #   # limits the number of cpus the container can use
  #   # else on each thread (core) a model will be loaded
  #   cpus: 1.0

  # preprocessing:
  #   build:
  #     context: ./src/preprocessing
  #     dockerfile: preprocessing.dockerfile
  #   depends_on:
  #     - ml-serve
  #   environment:
  #     - DOCKERIZED=true
  #   ports:
  #     - "5678:5678"
  #   expose:
  #     - "5678"

  frontend:
    build:
      context: ./src/frontend
      dockerfile: frontend.dockerfile
    ports:
      - "80:5000"
    expose:
      - "80"

volumes:
  data:


# networks:
#   default:
#     external:
#       name: my-net
